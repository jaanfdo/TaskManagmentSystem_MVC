using TMS.Models;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.SqlClient;
using System.Linq;
using System.Security.Claims;
using System.Web;

namespace TMS.Common
{
    public class cls_HelpMethods
    {
        //public static string CompanyID { get; set; }
        //public static string CompanyBranchID { get; set; }
        //public static string Company { get; set; }
        //public static string CompanyBranch { get; set; }
        //public static string UserID { get; set; }
        //public static string UserName { get; set; }

        public static void UserDetail()
        {
            try
            {
                using (ApplicationDbContext db = new ApplicationDbContext())
                {
                    var user = HttpContext.Current.User.Identity.Name;
                    if (user != null && user != "")
                    {
                        var userID = db.Users.FirstOrDefault(p => p.UserName == user).Id;

                        var company = db.tbl_securityUserMaster.FirstOrDefault(p => p.userLoged_ID == userID);
                        if (company != null)
                        {
                            System.Web.HttpContext.Current.Session["user_ID"] = company.user_ID.ToString();
                            System.Web.HttpContext.Current.Session["userName"] = company.userName.ToString();

                            var userIdentity = (ClaimsIdentity)HttpContext.Current.User.Identity;
                            var claims = userIdentity.Claims;
                            var roleClaimType = userIdentity.RoleClaimType;
                            var roles = claims.Where(c => c.Type == roleClaimType).ToList();

                            string sRoles = "";
                            List<string> lstRoles = new List<string>();
                            foreach (var item in roles)
                            {
                                lstRoles.Add(item.Value);
                            }
                            sRoles = String.Join(", ", lstRoles);
                            System.Web.HttpContext.Current.Session["userGroup"] = sRoles;
                        }
                    }
                }
            }
            catch (Exception)
            {
            }
        }

        public static void CompanyDetail()
        {
            try
            {
                using (ApplicationDbContext db = new ApplicationDbContext())
                {
                    var company = db.tbl_genCompanyInfo.FirstOrDefault();
                    if (company != null)
                    {
                        System.Web.HttpContext.Current.Session["company_ID"] = company.company_ID.ToString();
                        System.Web.HttpContext.Current.Session["companyName"] = company.companyName.ToString();

                        var branch = db.tbl_genCompanyBranchMaster.Where(p => p.company_ID == company.company_ID).FirstOrDefault();
                        if (branch != null)
                        {
                            System.Web.HttpContext.Current.Session["companyBranch_ID"] = branch.companyBranch_ID.ToString();
                            System.Web.HttpContext.Current.Session["branchName"] = branch.branchName.ToString();
                        }
                    }
                }
            }
            catch (Exception)
            {
            }

        }

        public static DataSet ExecQuery(string sQuery)
        {
            string cnnString = System.Configuration.ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;

            SqlConnection Sqlcon = new SqlConnection(cnnString);
            SqlDataAdapter Sqlda;
            DataSet ds = new DataSet();

            Sqlcon.Open();
            Sqlda = new SqlDataAdapter(sQuery, Sqlcon);
            Sqlda.Fill(ds);
            Sqlcon.Close();
            return (ds);
        }

    }

    public class tbl_AutoCode
    {
        private ApplicationDbContext db = new ApplicationDbContext();
        public static bool isAutoGenerate { get; set; }
        public static int iRecordCount { get; set; }

        public int Autogenerated_Form(int id)
        {
            int iReturnCount = 0;
            if (id > 0)
            {
                int iCount = db.tbl_securityFunctionMaster.Find(id.ToString()).counter;
                iReturnCount = iCount;
                iCount++;
                //tbl_securityFunctionMaster user = new tbl_securityFunctionMaster { function_ID = id, counter = (iCount++) };

                var result = db.tbl_securityFunctionMaster.SingleOrDefault(b => b.function_ID == id.ToString());
                if (result != null)
                {
                    result.counter = iCount;
                    db.Entry(result).State = EntityState.Modified;
                    db.SaveChanges();

                    //db.Entry(user).Property(x => x.counter).IsModified = true;
                    //db.SaveChanges();
                }
            }
            return iReturnCount;
        }

        public bool isAutogenerated_Form(int id)
        {
            bool bStatus = false;
            if (id > 0)
            {
                bStatus = db.tbl_securityFunctionMaster.Find(id.ToString()).isAutoGenerate ? true : false;
                isAutoGenerate = bStatus;
            }
            return bStatus;
        }

        public static string AutoCode(int iFormID)
        {
            string sValue = "";
            tbl_AutoCode oAutoCode = new tbl_AutoCode();
            if (oAutoCode.isAutogenerated_Form(iFormID))
                sValue = oAutoCode.Autogenerated_Form(iFormID).ToString();

            return sValue;
        }
    }

    public static class clsEnums
    {
        public enum enumAuthencationGroups
        {
            Administrators = 1,
            Managers = 2,
            Executives = 3,
            Employees = 4,
        }

        public enum enumFormNames
        {
            Home = 1,
            Task = 2,
            TaskEstimation = 3,
            TimeSheet = 4,
            TaskBucket = 5,
            UserMaster = 6,
        }

        public enum enumStatus
        {
            New = 1,
            Assigned = 2,
            WIP = 3,
            Dev_Release = 4,
            QA_Pass = 5,
            QA_Fail = 6,
            Completed = 7,
            Inactive = 8,
            OnHold = 9,
            Rejected = 10,
            DEVWIP = 11,
            QAWIP = 12,
        }
    }

    public static class clsConfig
    {
        public static string DefaultUser = "-1";
    }
}