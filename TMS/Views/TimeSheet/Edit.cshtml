
@{
    ViewBag.Title = "Edit Time Sheet";
    Layout = "~/Views/Shared/_Layout2.cshtml";
}

<div class="container">
    <form id="FormTimeSheet" method="post" action="@Url.Action("EditTimeSheet", "TimeSheet")">
        <div class="form-horizontal">
            <div class="form-group">
                <div class="col-md-6">
                    <label for="timeSheet_ID" class="control-label col-md-4">Time Sheet ID</label>
                    <div class="col-md-8">
                        <input type="text" name="timeSheet_ID" id="timeSheet_ID" value="@ViewBag.timeSheet_ID" class="form-control" readonly />
                    </div>
                </div>
                <div class="col-md-6">
                    <label for="timeSheetDate" class="control-label col-md-4">Time Sheet Date</label>
                    <div class="col-md-8">
                        <input type="date" name="timeSheetDate" id="timeSheetDate" class="form-control" />
                    </div>
                </div>
            </div>

            <div class="form-group">
                <label for="subTask_ID" class="control-label col-md-2">Sub Task ID</label>
                <div class="col-md-8">
                    @Html.DropDownList("subTask_ID", null, "Select", htmlAttributes: new { @id = "subTask_ID", @class = "form-control  col-md-6" })
                </div>
            </div>

            <div class="form-group">
                <label for="remarks" class="control-label col-md-2">Remarks</label>
                <div class="col-md-10">
                    <textarea name="remarks" id="remarks" class="form-control"></textarea>
                </div>
            </div>

            <div class="form-group">
                <label for="task_ID" class="control-label col-md-2">Task ID</label>
                <div class="col-md-6" id="SearchValues">
                    <div class="form-inline">
                        <input type="hidden" name="task_ID" id="task_ID" class="form-control task_ID" />
                        <input type="text" name="task" id="task" class="form-control task" placeholder="Search Here by Task Name..." />
                        <button type="button" id="btnAdd" class="btn btn-success"><i class="glyphicon glyphicon-plus"></i></button>
                    </div>
                </div>
            </div>

            <div class="form-group" id="SearchValues2">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th style="width:3%">#</th>
                            <th style="width:7%">Task ID</th>
                            <th style="width:30%">Task Reference</th>
                            <th style="width:8%">Utilized Hours</th>
                            <th style="width:0%; display:none;">Status ID</th>
                            <th style="width:15%">Status</th>
                            <th style="width:40%">Remarks</th>
                            <th style="width:5%"></th>
                        </tr>
                    </thead>
                    <tbody id="tblDetails"></tbody>
                    @*<tfoot id="tblDetails_Footer" style="background-color:darkgray;"></tfoot>*@
                </table>
            </div>

            <div class="form-group">
                <p>Total Utilized Hours : <span class="label label-primary" id="totalUtilizedHours"></span></p>
            </div>

            <div class="form-group">
                <hr />
                <div class="col-md-offset-9 col-md-3">
                    @*@Html.ActionLink("New", "Create", "", htmlAttributes: new { @class = "btn btn-success" })*@
                    <input type="button" id="btnUpdate" value="Update" class="btn btn-primary" />
                    <input type="button" id="btnCancel" value="Cancel" class="btn btn-primary" />
                </div>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $(document).on("keydown", "input", function (e) {
                if (e.which == 13) e.preventDefault();
            });


            var timeSheet_ID = $("#timeSheet_ID").val();
            LoadHeaderDetails(timeSheet_ID);
            DisableButton();
            LoadTask();

            autosize($('textarea'));
        });

        $('#btnUpdate').click(function () {
            if(CheckEmptyFields()){
                if(CheckDataGrid_Empty()){
                    if (CheckGridValue()) {
                        if (CheckGridNumberValue()) {
                            var detailArr = [];
                            detailArr.length = 0;

                            var iRow = 1;
                            $.each($("#tblDetails tr"), function () {
                                detailArr.push({
                                    line_No: iRow,
                                    timeSheet_ID: $("#timeSheet_ID").val(),
                                    task_ID: $(this).find('td:eq(1)').html(),
                                    utilizedHours: $(this).find('.utilizedHours').val(),
                                    status_ID: $(this).find('.status_ID').val(),
                                    remarks: $(this).find('.remarks').val()
                                });
                                iRow++;
                            });

                            //var headerArr = [];

                            var data = {
                                timeSheet_ID: $("#timeSheet_ID").val(),
                                timeSheetDate: $("#timeSheetDate").val(),
                                subTask_ID: $("#subTask_ID").val(),
                                remarks: $("#remarks").val(),
                                totalUtilizedHours: $("#totalUtilizedHours").text(),
                                TimeSheetDetails: detailArr
                            };

                            console.log(JSON.stringify(data));

                            var url = $('#FormTimeSheet').attr('action');
                            console.log(url);
                            $.ajax({
                                contentType: 'application/json; charset=utf-8',
                                dataType: 'json',
                                type: 'POST',
                                url: url,
                                data: JSON.stringify(data),
                                success: function (data) {
                                    if (data.status) {
                                        alert(data.Message);
                                        window.location.reload();
                                    }
                                    else {
                                        alert(data.Message);
                                    }
                                },
                                error: function () {
                                    alert("Error!")
                                }
                            });
                        }
                        else {
                            alert('Allow Numbers Only... \nUtilized Hours');
                        }
                    }
                    else{
                        alert('Fill Table Values...');
                    }
                }
            }
        });

        $('#btnCancel').click(function () {
            var timeSheet_ID = $('#timeSheet_ID').val();
            //alert(estimation_ID);
            var ans = confirm("Are you sure you want to delete this Record? \n\n Time Sheet Code - " + timeSheet_ID + "");
            if (ans) {
                $.ajax({
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    type: 'POST',
                    url: '../TimeSheet/Delete/',
                    data: JSON.stringify({ timeSheet_ID: timeSheet_ID }),
                    success: function (data) {
                        if (data.status) {
                            alert(data.Message);
                            DisableButton();
                        }
                        else {
                            alert(data.Message);
                        }
                    },
                    error: function () {
                        alert("Error!")
                    }
                });
            }
        });

        //add new row to table footer
        var iRow = "";
        var index = 1;
        $('#btnAdd').click(function () {
            if ($.trim($("#task_ID").val()) == "") {
                alert('Required Fields');
            } else {
                var task_ID = $('#task_ID').val();
                var duplicateItems = highlightDuplicates(task_ID, 1);

                if (duplicateItems == false) {
                    var validEstimation = CheckEstimationMandatory_Tasks(task_ID);

                    if (validEstimation == true) {
                        var row = $('#tblDetails').find('tr');
                        if (row.length > 0) {
                            console.log(row);
                            var lastname_id = row.find(".status_ID").last().attr('id');
                            console.log(lastname_id);
                            var split_id = lastname_id.split('_');

                            index = Number(split_id[2]) + 1;
                        }

                        var newRow = '';
                        newRow = '<tr>' +
                                '<td>' + iRow + '</td>' +
                                '<td>' + $('#task_ID').val() + '</td>' +
                                '<td>' + $('#task').val() + '</td>' +
                                '<td>' + '<input type="text" name="utilizedHours" id="utilizedHours" onchange="Cal()" onkeyup="Cal_KeyUp()" class="form-control utilizedHours" />' + '</td>' +
                                '<td style="display:none;">' + '<input type="hidden" name="status_ID" id="status_ID_' + index + '" class="form-control status_ID" />' + '</td>' +
                                '<td>' + '<input type="text" name="status" id="status_' + index + '" placeholder="Search Here..." class="form-control status" />' + '</td>' +
                                '<td>' + '<textarea name="remarks" id="remarks" class="form-control remarks" rows="1"></textarea>' + '</td>' +
                                '<td>' + '<a href="javascript:;" class="btn btn-danger item-delete""><i class="glyphicon glyphicon-remove"></i></a>' + '</td>' +
                                '</tr>';

                        //append clone row
                        $('#tblDetails').append(newRow);

                        autosize($('textarea'));

                        CalRowCount();
                        LoadStatus();

                        //clear select data
                        $('#task_ID').val('');
                        $('#task').val('');

                        index++;
                    }else{
                        alert('Required Task Estimation for This Task...');
                    }
                }else{
                    alert('Duplicated Items ' + task_ID);

                    $('#task_ID').val('');
                    $('#task').val('');
                }
            }
        });

        //delete rows
        $('#tblDetails').on('click', '.item-delete', function () {
            $(this).parents('tr').remove();
            Cal();
            CalRowCount();
        });

        function LoadHeaderDetails(timeSheet_ID) {
            //console.log(timeSheet_ID);
            $.ajax({
                type: "GET",
                url: '@Url.Action("TimeSheet", "TimeSheet")',
                dataType: 'json',
                data: { timeSheet_ID: timeSheet_ID },
                success: function (data) {
                    if (data.length > 0) {
                        var newRow = '';
                        console.log(data);

                        var date = data[0].timeSheetDate;
                        var timeSheetDate = new Date(parseInt(date.substr(6)));

                        $('#timeSheet_ID').val(data[0].timeSheet_ID)
                        $('#timeSheetDate').val(displayDate(timeSheetDate.toDateString()));
                        $('#remarks').val(data[0].remarks);
                        $('#totalUtilizedHours').text(data[0].totalUtilizedHours.toFixed(2));

                        LoadItems(data[0].timeSheet_ID);
                    }
                    else {
                        alert('No Data');
                    }
                }
            })
        }

        function LoadItems(timeSheet_ID) {
            //ajax function for fetch data
            $.ajax({
                type: "GET",
                url: '@Url.Action("TimeSheetsDetail", "TimeSheet")',
                async: false,
                dataType: 'json',
                data: { timeSheet_ID: timeSheet_ID },
                success: function (data) {
                    if (data.length > 0) {
                        var newRow = '';

                        console.log(data);
                        var iCount = 1;
                        for (var i = 0; i < data.length; i++) {
                            console.log(data[i].task_ID + "  " + data[i].task + "  " + data[i].utilizedHours + "  "+ data[i].status_ID);
                            newRow += '<tr>' +
                                    '<td>' + data[i].line_No + '</td>' +
                                    '<td>' + data[i].task_ID + '</td>' +
                                    '<td>' + data[i].task + '</td>' +
                                    '<td>' + '<input type="text" name="utilizedHours" id="utilizedHours" value="'+ data[i].utilizedHours +'"  onchange="Cal()" onkeyup="Cal_KeyUp()" class="form-control utilizedHours" />' + '</td>' +
                                    '<td style="display:none;">' + '<input type="hidden" name="status_ID" id="status_ID_' + iCount + '" value="'+ data[i].status_ID +'" class="form-control status_ID" />' + '</td>' +
                                    '<td>' + '<input type="text" name="status" id="status_' + iCount + '" placeholder="Search Here..." value="' + data[i].status + '" class="form-control status" />' + '</td>' +
                                    '<td>' + '<textarea name="remarks" id="remarks" class="form-control remarks" rows="1">' + data[i].remarks + '</textarea>' + '</td>' +
                                    '<td>' + '<a href="javascript:;" class="btn btn-danger item-delete""><i class="glyphicon glyphicon-remove"></i></a>' + '</td>' +
                                    '</tr>';

                            iCount++;
                        }

                        //append clone row
                        $('#tblDetails').append(newRow);
                        autosize($('textarea'));

                        LoadStatus();
                    }
                }
            })
        }

        function LoadStatus() {
            $(".status").autocomplete({
                appendTo: "#SearchValues2",
                autoFocus: true,
                minLength: 0,
                source: function (request, response) {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("SearchStatus", "Main")',
                        dataType: 'json',
                        data: { Search: request.term },
                        success: function (data) {
                            response(data);
                        }
                    });
                }
            })
            .autocomplete("instance")._renderItem = function (ul, item) {
                //console.log(item);
                return $("<li>")
                    .append("<div>" + item.status_ID + "  " + item.status + "</div>")
                    .appendTo(ul);
            };
        }

        function LoadTask(){
            $("#task").autocomplete({
                appendTo: "#SearchValues",
                autoFocus: true,
                minLength: 0,
                source: function (request, response) {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("SearchTasks", "Task")',
                        dataType: 'json',
                        data: { Search: request.term },
                        success: function (data) {
                            response(data);
                        }
                    });
                },
                select: function (event, ui) {
                    console.log(ui.item.taskReference);
                    $("#task").val(ui.item.taskReference);
                    $("#task_ID").val(ui.item.task_ID);

                    return false;
                }
            })
            .autocomplete("instance")._renderItem = function (ul, item) {
                //console.log(item);
                return $("<li>")
                    .append("<div>" + item.task_ID + "  " + item.taskReference + "</div>")
                    .appendTo(ul);
            };
        }

        $("#tblDetails").on('keyup', '.status', function () {
            var id = this.id;
            var splitid = id.split('_');
            var index = splitid[1];

            console.log(index);
            // Initialize jQuery UI autocomplete
            $('#' + id).autocomplete({
                appendTo: "#SearchValues2",
                autoFocus: true,
                minLength: 0,
                source: function (request, response) {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("SearchStatus", "Main")',
                        dataType: 'json',
                        data: { Search: request.term },
                        success: function (data) {
                            response(data);
                        }
                    });
                },
                select: function (event, ui) {
                    console.log(ui.item.status_ID);
                    $("#status_ID_" + index).val(ui.item.status_ID);
                    $("#status_" + index).val(ui.item.status);

                    return false;
                }
            }).autocomplete("instance")._renderItem = function (ul, item) {
                //console.log(item);
                return $("<li>")
                    .append("<div>" + item.status_ID + "  " + item.status + "</div>")
                    .appendTo(ul);
            };
        });

        function CheckEstimationMandatory_Tasks(task_ID) {
            var isAllValid = true;

            $.ajax({
                type: 'GET',
                url: 'Task/CheckEstimationMandatoryTasks?task_ID=' + task_ID,
                dataType: 'json',
                async: false,
                success: function (data) {
                    isAllValid = data;
                }
            });

            return isAllValid;
        }

        function CheckEmptyFields() {
            var isAllValid = true;
            if ($('#subTask_ID').val() == '') {
                isAllValid = false;
                alert('Fill Sub Task');
            }

            return isAllValid;
        }

        function CheckDataGrid_Empty() {
            var isAllValid = true;
            if ($("#tblDetails tr").length == 0) {
                isAllValid = false;
                alert('Fill Detail Table...');
            }

            return isAllValid;
        }

        function highlightDuplicates(val, rowIndex) {
            var status = false;
            $.each($("#tblDetails tr"), function () {
                var subTask = $(this).find('td:eq(' + rowIndex + ')').html();
                //console.log(subTask + ' - ' + val);

                if (val == subTask) {
                    console.log('Duplicate ' + true);
                    status = true;
                }
            });

            //var rowCount = $('#myTable tr').length;

            return status;
        }

        function CalRowCount() {
            var iRow = 1;
            var row = $('#tblDetails').find('tr');
            for(i=0;i<row.length;i++){
                $('#tblDetails').find('tr:eq('+i+')').find("td:eq(0)").html(iRow);

                iRow++;
            }
        }

        function Cal() {
            var sum = 0;
            var row = $('#tblDetails').find('tr');
            for(i=0;i<row.length;i++){
                var value = $('#tblDetails').find('tr:eq('+i+')').find(".utilizedHours").val();
                console.log(value);

                if (!isNaN(value) && value.length != 0) {
                    console.log(value);
                    sum += parseFloat(value);
                }
            }

            $('#totalUtilizedHours').text(sum.toFixed(2));
        }

        function Cal_KeyUp() {
            if ($(".utilizedHours").val().length > 1) {
                Cal()
            }
        }

        function DisableButton() {
            var isCancel = @ViewBag.isCancel.ToString().ToLower();

            $("#btnCancel").removeAttr("disabled");
            $("#btnUpdate").removeAttr("disabled");

            //Set button disabled
            if(isCancel == true){
                $("#btnCancel").attr("disabled", "disabled");
                $("#btnUpdate").attr("disabled", "disabled");
            }
        }

        function CheckGridValue() {
            var status = true;
            //console.log('ok');
            $.each($("#tblDetails tr"), function () {
                var utilizedHours = $(this).find(".utilizedHours").val();
                var status_ID = $(this).find(".status_ID").val();

                console.log(utilizedHours);
                console.log(status_ID);

                if (status_ID.length == 0) {
                    console.log(false);
                    status = false;
                }
                if (utilizedHours.length == 0) {
                    console.log(false);
                    status = false;
                }
            });

            return status;
        }

        function CheckGridNumberValue() {
            var status = true;

            $.each($("#tblDetails tr"), function () {
                var utilizedHours = $(this).find(".utilizedHours").val();

                console.log(utilizedHours);

                if (isNaN(utilizedHours)) {
                    console.log(false);
                    status = false;
                }
            });

            return status;
        }

    </script>
}
























@*//$('.utilizedHours').each(function () {
    //    var value = $(this).val();
    //    if (!isNaN(value) && value.length != 0) {
    //        console.log(value);
    //        sum += parseFloat(value);
    //    }
    //});

    //$(".status_ID option:contains(" + data[i].status_ID + ")").attr('selected', 'selected');

    //city = "option[val=" + data[i].status_ID + "]";
    //console.log(city);
    //$("#status_ID").find(city).attr("selected", "selected");
    //var arg ='option value';
    //$('#status_ID').val(data[i].status_ID)


    //console.log($('.status_ID').val());
    //$('.status_ID').val('0');

    //ok
    //<option value="'+data[i].status_ID+'" selected>'++'</option>
    //<label id="displayStatus_ID" class="displayStatus_ID">' + data[i].status_ID + '</label> <a href="javascript:;" id="btnEdit" class="btn btn-success btnEdit"><i class="glyphicon glyphicon-edit"></i></a>

    //var row = $('#tblDetails').find('td');
    //for(i=0;i<row.length;i++){
    //    //console.log(i);
    //    console.log(row.eq(i).text());
    //    if(row.eq(i).text() == val1){
    //        console.log('ok');
    //        row.find('td:eq(2)').text('000');
    //    }
    //}

    //$('#table1').find("tr:eq(2)").find("td:eq(1)").html();

    //$('.status_ID').change(function () {
    //    var status_ID = $(this).val();
    //    var status = $(this).text();
    //    $('.DisplayStatusID').text('');
    //    $('.DisplayStatus').text('');
    //    //var status_ID = $('.status_ID').val();
    //    //var status = $('.status_ID option:selected').text();
    //    $('.DisplayStatusID').text(status_ID);
    //    $('.DisplayStatus').text(status);
    //});

    //function setSelectedValue(){
    //    $('.status_ID').filter(function() {
    //        return ($(this).text() == 'Blue'); //To select Blue
    //    }).prop('selected', true);
    //}*@


@*////add table row to table footer
            //$('#tblDetails').on('click', '.item-edit', function () {
            //    //alert('ok');
            //    var raw = $(this).closest('tr');

            //    var iRow = raw.find('td:eq(0)').text();
            //    var TaskID = raw.find('td:eq(1)').text();
            //    var Task = raw.find('td:eq(2)').text();

            //    var UtilizedHours = raw.find('td:eq(3)').text();
            //    var Remarks = raw.find('td:eq(6)').text();
            //    //alert(TaskID);

            //    var rowCount = $('#tblDetails_Footer tr').length;
            //    if (rowCount == 0) {
            //        var newRow = '';
            //        newRow = '<tr>
        ' +
        //                '
        <td>' + iRow + '</td>' +
        //                '
        <td>' + TaskID + '</td>' +
        //                '
        <td>' + Task + '</td>' +
        //                '
        <td>' + '<input type="text" name="utilizedHours" id="utilizedHours" value="'+UtilizedHours+'" class="form-control utilizedHours" />' + '</td>' +
        //                '
        <td>' + '<select id="status_ID" class="form-control status_ID"></select>' + '</td>' +
        //                '
        <td style="display:none;"></td>' +
        //                '
        <td>' + '<input type="text" name="remarks" id="remarks" value="'+Remarks+'" class="form-control remarks" />' + '</td>' +
        //                '
        <td>' + '<a href="javascript:;" class="btn btn-success item-save" "><i class="glyphicon glyphicon-ok"></i></a>' + '</td>' +
        //                '
        <td>' + '<a href="javascript:;" class="btn btn-danger item-delete" "><i class="glyphicon glyphicon-remove"></i></a>' + '</td>' +
        //                '
    </tr>';

            //        //append clone row
            //        $('#tblDetails_Footer').append(newRow);
            //        LoadStatus();
            //    }else {
            //        alert('Please Complete Previous Record...');
            //    }
            //});

            ////edited value set to same row
            //$('#tblDetails_Footer').on('click', '.item-save', function () {
            //    var raw = $(this).closest('tr');

            //    var taskID = raw.find('td:eq(1)').text();
            //    var utilizedHours = raw.find('.utilizedHours').val();
            //    var status_ID = raw.find('.status_ID').val();
            //    var status = raw.find('.status_ID option:selected').text();
            //    var remarks = raw.find('.remarks').val();

            //    if (utilizedHours > 0) {
            //        if (status_ID != 0) {
            //            console.log('Item Update : ' +raw + ' - '+ taskID + ' - '+ utilizedHours + ' - '+ status_ID + ' - '+ status + ' - '+ remarks);

            //            var row = $('#tblDetails').find('tr');
            //            for(i=0;i<row.length;i++){
            //                console.log($('#tblDetails').find('tr:eq('+i+')').find("td:eq(1)").html());

            //                if($('#tblDetails').find('tr:eq('+i+')').find("td:eq(1)").html() == taskID){
            //                    $('#tblDetails').find('tr:eq('+i+')').find("td:eq(3)").html(utilizedHours);
            //                    $('#tblDetails').find('tr:eq('+i+')').find("td:eq(4)").html(status);
            //                    $('#tblDetails').find('tr:eq('+i+')').find("td:eq(5)").html(status_ID);
            //                    $('#tblDetails').find('tr:eq('+i+')').find("td:eq(6)").html(remarks);
            //                }
            //            }

            //            Cal();
            //            raw.remove();
            //        }
            //        else {
            //            alert('Fill the Detail.. \n Status');
            //        }
            //    }
            //    else {
            //        alert('Fill the Detail.. \n Utilized');
            //    }
            //});

            ////add newly added value to tbody
            //$('#tblDetails_Footer').on('click', '.item-add', function () {
            //    var raw = $(this).closest('tr');
            //    var taskID = raw.find('td:eq(1)').text();
            //    var task = raw.find('td:eq(2)').text();
            //    var utilizedHours = raw.find('.utilizedHours').val();
            //    var status_ID = raw.find('.status_ID').val();
            //    var status = raw.find('.status_ID option:selected').text();
            //    var remarks = raw.find('.remarks').val();
            //    var iRow = 1;

            //    if (utilizedHours > 0) {
            //        if (status_ID != 0) {
            //            console.log('Item Add : ' +raw + ' - '+ taskID + ' - '+ utilizedHours + ' - '+ status_ID + ' - '+ status + ' - '+ remarks);

            //            var newRow = '';
            //            newRow = '<tr>
        ' +
        //                    '
        <td>' + iRow + '</td>' +
        //                    '
        <td>' + taskID + '</td>' +
        //                    '
        <td>' + task + '</td>' +
        //                    '
        <td>' + utilizedHours + '</td>' +
        //                    '
        <td>' + status + '</td>' +
        //                    '
        <td style="display:none;">' + status_ID + '</td>' +
        //                    '
        <td>' + remarks + '</td>' +
        //                    '
        <td>' + '<a href="javascript:;" class="btn btn-info item-edit" "><i class="glyphicon glyphicon-edit"></i></a>' + '</td>' +
        //                    '
        <td>' + '<a href="javascript:;" class="btn btn-danger item-delete" "><i class="glyphicon glyphicon-remove"></i></a>' + '</td>' +
        //                    '
    </tr>';

            //            //append clone row
            //            $('#tblDetails').append(newRow);

            //            Cal();
            //            CalRowCount();
            //            raw.remove();
            //        }
            //        else {
            //            alert('Fill the Detail.. \n Status');
            //        }
            //    }
            //    else {
            //        alert('Fill the Detail.. \n Utilized');
            //    }
            //});


            //$('#tblDetails_Footer').on('click', '.item-delete', function () {
            //    $(this).parents('tr').remove();
            //});*@





@*<div class="form-group">
        @Html.LabelFor(model => model.isCancelled, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.isCancelled)
                @Html.ValidationMessageFor(model => model.isCancelled, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.user_ID, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.user_ID, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.user_ID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.createUser_ID, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.createUser_ID, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.createUser_ID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.modifiedUser_ID, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.modifiedUser_ID, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.modifiedUser_ID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.deletedUser_ID, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.deletedUser_ID, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.deletedUser_ID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.dateCreated, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.dateCreated, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.dateCreated, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.dateModified, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.dateModified, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.dateModified, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.dateDeleted, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.dateDeleted, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.dateDeleted, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.company_ID, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.company_ID, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.company_ID, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.companyBranch_ID, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.companyBranch_ID, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.companyBranch_ID, "", new { @class = "text-danger" })
        </div>
    </div>*@
