
@{
    ViewBag.Title = "Edit Estimation";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="container" style="margin-left:100px; margin-right:100px;">
    <div class="container" style="margin-top:10px; box-shadow: 5px 5px 3px grey; background-color:#f2f2f2;">
        <h2>Update Task Estimation</h2>
        <hr />
        <form method="post" id="FormTaskEstimation" action="@Url.Action("EditTaskEstimation", "TaskEstimation")">
            <div class="form-horizontal container">
                <div class="form-group">
                    <div class="col-md-6">
                        <label for="estimation_ID" class="col-md-4">Estimation ID</label>
                        <div class="col-md-8">
                            <input type="text" name="estimation_ID" id="estimation_ID" value="@ViewBag.estimation_ID" class="form-control" readonly />
                        </div>
                    </div>

                    <div class="col-md-6">
                        <label for="estimationDate" class="col-md-4">Estimation Date</label>
                        <div class="col-md-8">
                            @*@Html.TextBoxFor(m => m.estimationDate, "{0:yyyy-MM-dd}", new { @id = "estimationDate", @class = "form-control", type = "date" })*@
                            <input type="date" name="estimationDate" id="estimationDate" class="form-control" readonly />
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="task_ID" class="col-md-2">Task ID</label>
                    <div class="col-md-8">
                        <input type="text" name="task_ID" id="task_ID" class="form-control task_ID" placeholder="Search Here by Task ID..." />
                        @*@Html.DropDownList("task_ID", null, "Select", htmlAttributes: new { @class = "form-control", @id = "task_ID" })*@
                    </div>
                </div>

                <div class="form-group">
                    <label for="task" class="col-md-2">Task Reference</label>
                    <div class="col-md-10">
                        <span class="text-muted">
                            <em name="task" id="task" class="task" style="white-space:pre-wrap;">-</em>
                        </span>
                    </div>
                </div>

                <div class="form-group">
                    <label for="taskRemarks" class="col-md-2">Task Remarks</label>
                    <div class="col-md-10">
                        <span class="text-muted">
                            <em name="taskRemarks" id="taskRemarks" class="taskRemarks" style="white-space:pre-wrap;">-</em>
                        </span>
                    </div>
                </div>

                <div class="form-group">
                    <div class="panel panel-default" style="margin-bottom:5px;">
                        <div class="panel-heading">
                            <i class="fa fa-bell fa-fw"></i> Task Details
                        </div>
                        <div class="panel-body">
                            <div class="col-sm-6">
                                <div class="list-group" style="margin-bottom:5px;">
                                    <a href="#" class="list-group-item">
                                        Client
                                        <span class="pull-right text-muted small">
                                            <em id="Client">-</em>
                                        </span>
                                    </a>
                                    <a href="#" class="list-group-item">
                                        Product
                                        <span class="pull-right text-muted small">
                                            <em id="Product">-</em>
                                        </span>
                                    </a>
                                    <a href="#" class="list-group-item">
                                        Task Type
                                        <span class="pull-right text-muted small">
                                            <em id="TaskType">-</em>
                                        </span>
                                    </a>
                                    <a href="#" class="list-group-item">
                                        Module
                                        <span class="pull-right text-muted small">
                                            <em id="Module">-</em>
                                        </span>
                                    </a>
                                    <a href="#" class="list-group-item">
                                        Function
                                        <span class="pull-right text-muted small">
                                            <em id="Function">-</em>
                                        </span>
                                    </a>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="list-group" style="margin-bottom:5px;">
                                    <a href="#" class="list-group-item">
                                        <i class="fa fa-envelope fa-fw"></i> Priority
                                        <span class="pull-right text-muted small">
                                            <em id="Priority">-</em>
                                        </span>
                                    </a>
                                    <a href="#" class="list-group-item">
                                        <i class="fa fa-tasks fa-fw"></i> Task Status
                                        <span class="pull-right text-muted small">
                                            <em id="TaskStatus">-</em>
                                        </span>
                                    </a>
                                    <a href="#" class="list-group-item">
                                        <i class="fa fa-comment fa-fw"></i> Reported Date
                                        <span class="pull-right text-muted small">
                                            <em id="ReportedDate">-</em>
                                        </span>
                                    </a>
                                    <a href="#" class="list-group-item">
                                        <i class="fa fa-twitter fa-fw"></i> Reported By
                                        <span class="pull-right text-muted small">
                                            <em id="ReportedBy">-</em>
                                        </span>
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="remarks" class="col-md-2">Remarks</label>
                    <div class="col-md-10">
                        <textarea name="remarks" id="remarks" class="form-control"></textarea>
                    </div>
                </div>

                <div class="form-group">
                    <div class="form-inline">
                        <div class="col-md-2">
                            <label for="task_ID">Sub Task</label>
                        </div>
                        <div class="col-md-6">
                            <p>
                                @Html.DropDownList("subTask_ID", null, "Select", htmlAttributes: new { @id = "subTask_ID", @class = "form-control" })
                                <a href="javascript:;" id="btnAdd" class="btn btn-success"><i class="glyphicon glyphicon-plus"></i></a>
                            </p>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>#</th>
                                <th>Sub Task ID</th>
                                <th>Sub Task</th>
                                <th>Estimated Hours</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody id="tblDetails"></tbody>
                    </table>
                </div>

                <div class="form-group">
                    <p>Total Estimated Hours : <span class="label label-primary" id="totalEstimatedHours"></span></p>
                </div>

                <div class="form-group">
                    <hr />
                    <div class="col-md-12">
                        <div class="pull-left">
                            @Html.ActionLink("<< Back to Task List", "Index", "TaskBucket", null, htmlAttributes: new { @class = "btn btn-info" })
                        </div>
                        <div class="pull-right">
                            @Html.ActionLink("New", "Create", "TaskEstimation", new { task_ID = "0" }, htmlAttributes: new { @class = "btn btn-primary" })
                            <input type="button" value="Approve" id="btnApprove" class="btn btn-primary" />
                            <input type="button" value="Update" id="btnUpdate" class="btn btn-primary" />
                            <input type="button" value="Cancel" id="btnCancel" class="btn btn-primary" />
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>
</div>


@section Scripts {
    <script>
        $(document).ready(function () {
            $(document).on("keydown", "input", function (e) {
                if (e.which == 13) e.preventDefault();
            });

            $('#subTask_ID').val('');
            LoadHeaderDetails($('#estimation_ID').val());

            var isApprove = @ViewBag.isApprove.ToString().ToLower();
            var isCancel = @ViewBag.isCancel.ToString().ToLower();
            DisableButton(isApprove, isCancel);

            //LoadTask();

            //$('textarea').autogrow();
            autosize($('textarea'));
        });

        $('#btnUpdate').click(function () {
            if (CheckEmptyFields()) {
                if (CheckDataGrid_Empty()) {
                    if (CheckTotalEstimatedHours()) {
                        if (CheckGridNumbervalue()) {
                            var detailArr = [];
                            detailArr.length = 0;

                            var iRow = 1;
                            $.each($("#tblDetails tr"), function () {
                                detailArr.push({
                                    line_No: iRow,
                                    estimation_ID: $('#estimation_ID').val(),
                                    subTask_ID: $(this).find('td:eq(1)').html(),
                                    estimatedHours: $(this).find('.estimatedHours').val()
                                });
                                iRow++;
                            });


                            var data = {
                                estimation_ID: $('#estimation_ID').val(),
                                estimationDate: $("#estimationDate").val(),
                                task_ID: $("#task_ID").val(),
                                totalEstimatedHours: $('#totalEstimatedHours').text(),
                                remarks: $("#remarks").val(),
                                TaskEstimationDetails: detailArr
                            };
                            console.log(JSON.stringify(data));

                            var url = $('#FormTaskEstimation').attr('action');
                            console.log(url);
                            $.ajax({
                                contentType: 'application/json; charset=utf-8',
                                dataType: 'json',
                                type: 'POST',
                                url: url,
                                data: JSON.stringify(data),
                                success: function (data) {
                                    console.log('Updated Data : ' + data);
                                    if (data.status) {
                                        alert(data.Message);
                                    }
                                    else {
                                        alert('Error Saving....');
                                    }
                                },
                                error: function () {
                                    alert("Error!")
                                }
                            });

                        }
                        else {
                            alert('Allow Numbers Only... \nEstimated Hours');
                        }
                    }
                    else{
                        alert('Add Estimated Hours to Sub Tasks...');
                    }
                }
            }
        });

        $('#btnCancel').click(function () {
            var estimation_ID = $('#estimation_ID').val();
            console.log('Estimation ID - ' + estimation_ID);
            var ans = confirm("Are you sure you want to delete this Record? \n\n Estimation Code - " + estimation_ID + "");
            if (ans) {
                $.ajax({
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    type: 'POST',
                    url: '@Url.Action("DeleteTaskEstimation", "TaskEstimation")',
                    data: JSON.stringify({ estimation_ID: estimation_ID }),
                    success: function (data) {
                        console.log('Canceled Data : ' + data);
                        if (data.status) {
                            alert('Successfully Cancelled');
                            DisableButton(false, data.isCancelled);
                        }
                        else {
                            alert('Error');
                        }
                    },
                    error: function () {
                        alert("Error!")
                    }
                });
            }
        });

        $('#btnApprove').click(function () {
            var estimation_ID = $('#estimation_ID').val();
            console.log('Estimation ID - ' + estimation_ID);
            var ans = confirm("Are you sure you want to approve this Record? \n\n Estimation Code - " + estimation_ID + "");
            if (ans) {
                $.ajax({
                    contentType: 'application/json; charset=utf-8',
                    dataType: 'json',
                    type: 'POST',
                    url: '@Url.Action("ApproveTaskEstimation", "TaskEstimation")',
                    data: JSON.stringify({ estimation_ID: estimation_ID }),
                    success: function (data) {
                        console.log('Approved Data : ' + data);
                        if (data.status) {
                            alert('Successfully Approve');
                            DisableButton(data.isApproved, false);
                        }
                        else {
                            alert('Error');
                        }
                    },
                    error: function () {
                        alert("Error!")
                    }
                });
            }
        });

        var iRow = 1;
        $('#btnAdd').click(function () {
            if ($.trim($("#subTask_ID").val()) == "") {
                alert('Required Fields');
            } else {
                var subTaskID = $('#subTask_ID').val();
                var value = highlightDuplicates(subTaskID, 1);

                if (value == false) {
                    var newRow = '';
                    newRow = '<tr>' +
                            '<td>' + iRow + '</td>' +
                            '<td>' + $('#subTask_ID').val() + '</td>' +
                            '<td>' + $('#subTask_ID option:selected').text() + '</td>' +
                            '<td>' + '<input type="text" name="estimatedHours" id="estimatedHours" onchange="Cal()" onkeyup="Cal_KeyUp()"  class="form-control estimatedHours" />' + '</td>' +
                            '<td>' + '<a href="javascript:;" class="btn btn-danger item-delete"><i class="glyphicon glyphicon-remove"></i></a>' + '</td>' +
                            '</tr>';

                    //append clone row
                    $('#tblDetails').append(newRow);

                    //clear select data
                    $('#subTask_ID').val('1');
                    //$('#estimatedHours').val('0.00');

                    iRow++;
                }else{
                    alert('Duplicate Value');
                }
            }
        });

        //remove button click event
        $('#tblDetails').on('click', '.item-delete', function () {
            $(this).parents('tr').remove();
            Cal();
        });

        function Cal() {
            //var val = $('.estimatedHours').val();
            //    console.log(val);
            var sum = 0;
            $('.estimatedHours').each(function () {
                var value = $(this).val();
                if (!isNaN(value) && value.length != 0) {
                    console.log(value);
                    sum += parseFloat(value);
                }
            });

            $('#totalEstimatedHours').text(sum.toString());
        }

        function Cal_KeyUp() {
            if ($(".estimatedHours").val().length > 1) {
                Cal()
            }
        }

        function LoadHeaderDetails(estimation_ID) {
            console.log(estimation_ID);
            $.ajax({
                type: "GET",
                url: '@Url.Action("EstimationDetails", "TaskEstimation")',
                async: false,
                dataType: 'json',
                data: { estimation_ID: estimation_ID },
                success: function (data) {
                    if (data.length > 0) {
                        var newRow = '';
                        console.log(data);

                        var date = data[0].estimationDate;
                        var estimationDate = new Date(parseInt(date.substr(6)));

                        $('#estimationDate').val(displayDate(estimationDate.toDateString()));
                        $('#remarks').val(data[0].remarks);
                        $('#totalEstimatedHours').text(data[0].totalEstimatedHours);

                        LoadTasksDetails(data[0].task_ID);
                        LoadItems(data[0].estimation_ID);


                    }
                    else {
                        alert('No Data');
                    }
                }
            });
        }

        function LoadTasksDetails(task_ID) {
            //var task_ID = $("#task_ID").val();
            $.ajax({
                type: "GET",
                url: '@Url.Action("TasksDetails", "Task")',
                async: false,
                dataType: 'json',
                data: { task_ID: task_ID },
                success: function (data) {
                    if (data.length > 0) {
                        var newRow = '';

                        var date = data[0].ReportedDate;
                        var ReportedDate = new Date(parseInt(date.substr(6)));

                        $('#task_ID').attr('readonly', true);

                        $('#task_ID').val(data[0].Task_ID);
                        $('#task').text(data[0].TaskReference);
                        $('#taskRemarks').text(data[0].Remarks);

                        $('#Client').text(data[0].Client);
                        $('#Product').text(data[0].Product);
                        $('#TaskType').text(data[0].TaskType);
                        $('#Function').text(data[0].Function);
                        $('#Module').text(data[0].Module);
                        $('#Priority').text(data[0].Priority);
                        $('#ReportedBy').text(data[0].ReportedBy);
                        $('#ReportedDate').text(ReportedDate.toDateString('dd-MM-yyyy'));
                        $('#TaskStatus').text(data[0].TaskStatus);
                    }
                }
            });
        }

        function LoadItems(estimation_ID) {

            //ajax function for fetch data
            $.ajax({
                type: "GET",
                url: '../TaskEstimation/SubTaskDetails/',
                async: false,
                dataType: 'json',
                data: { estimation_ID: estimation_ID },
                success: function (data) {
                    $("#tblDetails").empty();
                    if (data.length > 0) {
                        var newRow = '';
                        var i;
                        console.log(data);
                        for (i = 0; i < data.length; i++) {
                            //console.log(data[i].subTask_ID + "  " + data[i].subTask + "  " + data[i].estimatedHours);

                            newRow += '<tr>' +
                                '<td>' + iRow + '</td>' +
                                '<td>' + data[i].subTask_ID + '</td>' +
                                '<td>' + data[i].subTask + '</td>' +
                                '<td>' + '<input type="text" name="estimatedHours" id="estimatedHours" class="form-control estimatedHours" onchange="Cal()" onkeyup="Cal_KeyUp()"  value="' + data[i].estimatedHours + '" />' + '</td>' +
                                '<td>' + '<a href="javascript:;" class="btn btn-danger item-delete""><i class="glyphicon glyphicon-remove"></i></a>' + '</td>' +
                                '</tr>';

                        }
                        $('#tblDetails').append(newRow);

                    }
                }
            })
        }

        function DisableButton(isApprove, isCancel) {

            console.log(isApprove);
            console.log(isCancel);

            $("#btnApprove").removeAttr("disabled");
            $("#btnCancel").removeAttr("disabled");
            $("#btnUpdate").removeAttr("disabled");

            if (isApprove == true) {
                $("#btnApprove").addClass('btn btn-success');
                $("#btnApprove").attr("disabled", "disabled");

                $("#btnCancel").attr("disabled", "disabled");
                $("#btnUpdate").attr("disabled", "disabled");
            }

            if (isCancel == true) {
                $("#btnCancel").addClass('btn btn-danger');
                $("#btnCancel").attr("disabled", "disabled");


                $("#btnApprove").attr("disabled", "disabled");
                $("#btnUpdate").attr("disabled", "disabled");
            }
        }

        function CheckEmptyFields() {
            var isAllValid = true;
            if ($('#task_ID').val() == '') {
                isAllValid = false;
                alert('Fill Task');
                //$('#task_ID').siblings('span.field-validation-valid').css('visibility', 'visible');
                //$('#task_ID').siblings('span.field-validation-valid').text('Task Required');
            }

            return isAllValid;
        }

        function CheckDataGrid_Empty() {
            var isAllValid = true;
            if ($("#tblDetails tr").length == 0) {
                isAllValid = false;
                alert('Fill Detail Table...');
            }

            return isAllValid;
        }

        function CheckDataGrid_Empty() {
            var isAllValid = true;
            if ($("#tblDetails tr").length == 0) {
                isAllValid = false;
                alert('Fill Detail Table...');
            }

            return isAllValid;
        }

        function CheckTotalEstimatedHours() {
            var bStatus = true;
            var row = $('#tblDetails').find('tr');
            for (i = 0; i < row.length; i++) {
                var value = row.find("td:eq(3)").find('.estimatedHours').val();
                console.log(value);

                if (value.length == 0) {
                    bStatus = false;
                    return bStatus;
                }
            }

            return bStatus;
        }

        function highlightDuplicates(val, rowIndex) {
            var status = false;
            $.each($("#tblDetails_Footer tr"), function () {
                var subTask = $(this).find('td:eq(' + rowIndex + ')').html();
                if (val == subTask) {
                    console.log('Duplicate ' + true);
                    status = true;
                }
            });

            return status;
        }

        function CheckGridNumbervalue() {
            var status = true;

            $.each($("#tblDetails tr"), function () {
                var estimatedHours = $(this).find(".estimatedHours").val();

                console.log(estimatedHours);

                if (isNaN(estimatedHours)) {
                    console.log(false);
                    status = false;
                }
            });

            return status;
        }

        @*function LoadTask(){
            $("#task_ID").autocomplete({
                minLength: 0,
                source: function (request, response) {
                    $.ajax({
                        type: 'POST',
                        url: '@Url.Action("SearchTasks", "Task")',
                        dataType: 'json',
                        data: { Search: request.term } ,
                        success: function (data) {
                            response(data);
                        }
                    })
                },
                select: function (event, ui) {
                    console.log(ui.item.taskReference);
                    $("#task_ID").val(ui.item.taskReference);
                    $("#task").title(ui.item.task_ID);

                    LoadTasksDetails(ui.item.task_ID);

                    return false;
                }
            })
            .autocomplete("instance")._renderItem = function (ul, item) {
                //console.log(item);
                return $("<li>")
                    .append("<div>" + item.task_ID + "  " + item.taskReference + "</div>")
                    .appendTo(ul);
            };
        }*@

        ////Append a change event listener to you inputs
        //$('input').change(function(){
        //    //Validate your form here, example:
        //    var validated = true;
        //    if($('#nome').val().length === 0) validated = false;
        //    //If form is validated enable form
        //    if(validated) $("input[type=submit]").removeAttr("disabled");
        //});

        //Aditional Methods
        //function FillDataGrid(subTask_ID, subTaskName, estimatedHours){
        //    var newRow = '';
        //    newRow = '<tr>' +
        //            '<td>' + iRow + '</td>' +
        //            '<td>' + $('#subTask_ID').val() + '</td>' +
        //            '<td>' + $('#subTask_ID option:selected').text() + '</td>' +
        //            '<td>' + '<input type="number" name="estimatedHours" id="estimatedHours" onchange="Cal()" onkeyup="Cal_KeyUp()"  class="form-control estimatedHours" />' + '</td>' +
        //            '<td>' + '<a href="javascript:;" class="btn btn-danger item-delete"><i class="glyphicon glyphicon-remove"></i></a>' + '</td>' +
        //            '</tr>';
        //    //append clone row
        //    $('#tblDetails').append(newRow);
        //}

        //$('.estimatedHours').change(function () {
        //    var val = $('.estimatedHours').val();
        //    console.log(val);
        //    var sum = 0;
        //    $('.estimatedHours').each(function () {
        //        var value = $(this).val();
        //        console.log(value);
        //        if (!isNaN(value) && value.length != 0) {
        //            console.log(value);
        //            sum += parseFloat(value);
        //        }
        //    });
        //    $('#totalEstimatedHours').text(sum.toString());
        //});

        //$(document).on('click', 'a.deleteItem', function (e) {
        //    e.preventDefault();
        //    var $self = $(this);
        //    if ($(this).attr('data-itemId') == "0") {
        //        $(this).parents('tr').css("background-color", "#ff6347").fadeOut(800, function () {
        //            $(this).remove();
        //        });
        //    }
        //});


    </script>
}
















@*@using (Html.BeginForm("EditTaskEstimation", "tbl_pmsTxTimeSheet", FormMethod.Post))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.estimation_ID)

            <div class="form-group">
                @Html.LabelFor(model => model.estimationDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.estimationDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.estimationDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.task_ID, "task_ID", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("task_ID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.task_ID, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <a href="#" id="Add" class="btn btn-success"><i class="glyphicon glyphicon-plus"></i></a>


                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Estimated ID</th>
                            <th>Sub Task</th>
                            <th>Estimated Hours</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody id="partial">
                        @{ int i = 0;}
                        @foreach (var item in Model.tbl_pmsTxTaskEstimation_Detail)
                        {
                            <tr>
                                <td>@Html.DisplayFor(model => item.line_No)</td>
                                <td>@Html.DisplayFor(model => item.estimation_ID)</td>
                                <td>@Html.DisplayFor(model => item.subTask_ID )</td>
                                <td>@Html.DisplayFor(model => item.estimatedHours)</td>
                                <td><a href="#" id="Remove" class="btn btn-danger"><i class="glyphicon glyphicon-remove"></i></a></td>
                            </tr>
                            i++;
                        }
                        @{Html.RenderAction("Create", "tbl_pmsTxTaskEstimation_Detail");}
                    </tbody>
                </table>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.totalEstimatedHours, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.totalEstimatedHours, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.totalEstimatedHours, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Save" class="btn btn-default" />
                </div>
            </div>
        </div>
    }*@
